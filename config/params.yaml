# ===================================================================
# dogm_ros parameter file (Annotated Version)
# ===================================================================

# 1. ROS Topics & Coordinate Frames
# -------------------------------------------------------------------
lidar_topic: "/scan"                     # Topic for sensor_msgs/LaserScan
radar_topic: "/ti_mmwave/radar_scan_pcl_0" # Topic for sensor_msgs/PointCloud2 (mmWaveCloudType)
grid_topic: "/dogm/grid"                 # Topic for nav_msgs/OccupancyGrid output
marker_topic: "/dogm/markers"            # Topic for visualization_msgs/MarkerArray (cells and arrows)
base_frame: "base_link"                  # Robot's base frame (for calculating grid position)
odom_topic: "/odom"                      # Topic for nav_msgs/Odometry (for ego-motion compensation)

# 2. Grid Map & Filter Base Settings
# -------------------------------------------------------------------
grid_size: 3.0                           # Total width/height of the square grid map (meters)
grid_resolution: 0.10                    # Size of a single grid cell (meters)
filter_update_rate: 10.0                  # Main filter loop frequency (Hz)

# [NEW] Minimum LiDAR hits in a cell to *start* calculating occupancy mass.
# Prevents stray points (noise) from creating occupied cells.
#
lidar_point_counts: 5

# 3. Particle Filter & Process Model (Core Algorithm)
# -------------------------------------------------------------------
num_particles: 5000                     # Total number of particles used by the filter
max_velocity: 1.5                        # Maximum speed a particle can have (m/s)
process_noise_pos: 0.03                  # Stddev for position "random walk" in predict step (m)
process_noise_vel: 0.05                  # Stddev for velocity "random walk" in predict step (m/s)

# Probability that a particle survives to the next time step.
#
persistence_prob: 0.99

# Probability of a new object "birthing" in a previously unknown cell.
# Used in updateOccupancy to calculate newborn mass 'rho_b'.
#
birth_prob: 0.02

# 4. New Particle Generation (The part we discussed)
# -------------------------------------------------------------------
# Stddev for velocity of *static* newborn particles. (Should be low, centered at 0)
#
newborn_vel_stddev: 0.3

# Stddev for velocity of *dynamic* newborn particles. (Should be high, for diverse speed guesses)
#
dynamic_newborn_vel_stddev: 1.5

# 5. Velocity Damping & Classification
# -------------------------------------------------------------------
# If a particle's speed drops below this, it gets artificially slowed down.
# Helps remove dynamic particles from objects that have stopped.
#
velocity_damping_threshold: 0.2
velocity_damping_factor: 0.2             # How much to slow down (0.2 = 80% reduction)

# The FINAL threshold. If a cell's average particle speed is above this,
# 'has_speed_from_particles' becomes true.
#
static_velocity_threshold: 0.2

# 6. Radar Sensor Fusion (Key parameters)
# -------------------------------------------------------------------
use_radar: true                         # Master toggle for all radar fusion logic

# 6a. Radar Hint Generation (Temporal & Spatial Smoothing)
# How many frames a radar point is kept in a cell's buffer.
#
radar_buffer_size: 5
# Minimum points needed in the buffer to create a reliable 'radar_vr_hint'.
#
min_radar_points: 3

# Radius for *spatial* smoothing (borrowing hints from neighbors).
# 3 means it checks a 7x7 (49-cell) area around the target cell.
#
radar_hint_search_radius: 2 

# --- Birth Ratio Scaling (Your Question) ---
# Default ratio of dynamic particles if NO RADAR HINT is found. (e.g., 10%)
# This implies "Assume Static" philosophy.
#
min_dynamic_birth_ratio: 0.1

# Maximum ratio of dynamic particles if a STRONG RADAR HINT is found. (e.g., 90%)
#
max_dynamic_birth_ratio: 0.9

# The radar speed (m/s) at which the ratio scales to the maximum.
# (e.g., speed=0.5 -> 50% scale, speed=1.0 -> 100% scale -> 90% dynamic ratio)
#
max_radar_speed_for_scaling: 1.0 

# 6b. Radar Weight Update (in particle_filter.cpp)
# The 'stddev' (size of the "trust zone") for the 'radar_likelihood'.
# Smaller = stricter, particle speed must match radar speed exactly.
# Larger = looser, allows for more error.
#
radar_noise_stddev: 0.4

# 6c. Safety Net 1: Measurement Correction (Handles crossing objects)
# If particles show speed but radar shows 0 (crossing object),
# this forces a 'dynamic' classification.
#
use_measurement_correction: true

# 6d. Safety Net 2: False Static Detection (Handles slow walkers)
# If an object is 'static' for 'fsd_T_static' frames but was 'free'
# 'fsd_T_free' frames before that, it's likely a slow-starting
# dynamic object. Force dynamic classification.
#
use_false_static_detection: true
fsd_T_static: 2 
fsd_T_free: 5   

# 7. Misc / Visualization
# -------------------------------------------------------------------
show_velocity_arrows: true               # Toggle for RViz velocity markers
use_ego_comp: true                       # Compensate for robot's own movement
max_velocity_for_scaling: 2.0            # Max speed for coloring RViz markers