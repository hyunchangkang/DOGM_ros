# 1. ROS 토픽 및 좌표계 설정
# lidar_topic: 입력으로 사용할 LaserScan 토픽의 이름.
lidar_topic: "/scan"
# grid_topic: 결과물로 발행할 OccupancyGrid 토픽의 이름.
grid_topic: "/dogm/grid"
# marker_topic: 속도 벡터(화살표)를 시각화하기 위한 MarkerArray 토픽의 이름.
marker_topic: "/dogm/markers"
# base_frame: 로봇의 기준이 되는 좌표계 이름.
base_frame: "base_link"

# 2. 그리드 맵 및 필터 설정
# grid_size: 생성할 정사각형 그리드 맵의 한 변 길이 (미터 단위).
grid_size: 3.0
# grid_resolution: 그리드 맵의 해상도, 즉 셀 하나의 크기 (미터 단위).
grid_resolution: 0.15
# filter_update_rate: 메인 필터 루프가 1초에 몇 번 실행될지에 대한 주파수 (Hz).
filter_update_rate: 20.0

# 3. 파티클 필터 및 프로세스 모델
# max_velocity: 파티클이 가질 수 있는 최대 속도 제한값 (m/s).
max_velocity: 2.0
# num_particles: 필터에서 사용할 전체 파티클의 개수.
num_particles: 5000
# process_noise_pos: 예측 단계에서 파티클의 '위치'에 가해지는 노이즈의 표준편차.
process_noise_pos: 0.05
# process_noise_vel: 예측 단계에서 파티클의 '속도'에 가해지는 노이즈의 표준편차. 민첩성을 결정하는 핵심 변수.
process_noise_vel: 2.5 # [대폭 상향] 0.75 -> 2.5. 파티클의 반응성을 극대화.
# persistence_prob: 한 스텝에서 다음 스텝으로 파티클이 살아남을 생존 확률.
persistence_prob: 0.99
# birth_prob: 이전에 비어있던 셀에서 새로운 객체가 나타날 확률.
birth_prob: 0.03 # [소폭 상향] 0.02 -> 0.03. 신규 객체 탐지를 약간 더 빠르게.

# 4. 신규 파티클 생성 관련 설정
# newborn_vel_stddev: '정적' 가설을 가지고 태어나는 신규 파티클의 초기 속도 표준편차.
newborn_vel_stddev: 0.5 # [상향 조정] 0.3 -> 0.5. 정적 가설도 약간의 유연성 부여.
# dynamic_birth_ratio: 신규 파티클 중 '동적' 가설을 가지고 태어나는 파티클의 비율.
dynamic_birth_ratio: 0.6 # [상향 조정] 0.4 -> 0.6. 신규 객체는 동적일 가능성이 더 높다고 가정.
# dynamic_newborn_vel_stddev: '동적' 가설을 가지고 태어나는 신규 파티클의 초기 속도 표준편차.
dynamic_newborn_vel_stddev: 4.0 # [상향 조정] 3.0 -> 4.0. 더 넓은 초기 속도 후보군 확보.

# 5. 속도 감쇠 및 동적/정적 분류
# velocity_damping_threshold: 이 속도(m/s) 값보다 느린 파티클은 점차 속도가 감쇠됨.
velocity_damping_threshold: 0.2
# velocity_damping_factor: 저속 파티클의 속도를 얼마나 강하게 감쇠시킬지 결정 (0에 가까울수록 강함).
velocity_damping_factor: 0.8
# mahalanobis_threshold: 셀을 '동적'으로 분류하는 기준이 되는 임계값. 가장 지배적인 변수.
mahalanobis_threshold: 9.21
# max_velocity_for_scaling: RViz에서 속도 시각화(색상/길이)의 기준이 되는 속도.
max_velocity_for_scaling: 0.5

# 6. 기타 설정
# show_velocity_arrows: RViz에 속도 화살표를 표시할지 여부.
show_velocity_arrows: true
# use_ego_comp: 로봇 자신의 움직임을 보상할지 여부.
use_ego_comp: true
# odom_topic: 로봇의 Odometry 정보를 받아오는 토픽 이름.
odom_topic: "/odom"